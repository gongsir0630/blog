<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用 Travis 打造 SpringBoot 应用持续集成和自动部署 | Travis CI 初体验</title>
      <link href="/blog/2021/04/02/travis-ci-springboot.html"/>
      <url>/blog/2021/04/02/travis-ci-springboot.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近一直在写毕设项目（<a href="https://github.com/gongsir0630/campus-recruitment-guidance">柚子帮校招指导服务平台</a>），顺便整理了一下自己 <a href="https://github.com/gongsir0630">GitHub</a> 上的项目：</p><p><img src= "/blog/img/loading.gif" data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f3066c64416408db5d7a593fc125062~tplv-k3u1fbpfcp-watermark.image" alt="My GitHub HomePage"></p><p>大学这几年，还是写了一些能上简历的项目，每一个项目都是 <code>Pm-&gt;Dev-&gt;Op</code> 进行角色扮演，特别是从开发到运维部署这一阶段， 以前每次的版本迭代都要重复下面的流程：</p><ul><li>git add &amp;&amp; git commit &amp;&amp; git push -&gt; ①代码的迭代</li><li>mvn clean package -&gt; ②项目打包</li><li>scp -r target/xxx.jar user@host:/dir/xxx.jar -&gt; ③上传应用到服务器</li><li>ssh user@host -&gt; ④登录服务器</li><li>sh restart.sh -&gt; ⑤执行部署脚本</li><li>发现bug -&gt; 修改代码 -&gt; goto ①</li></ul><p>如果你也有类似经历，一定会深感<strong>持续集成</strong>的必要性，因为手动部署实在又繁琐又耗时，虽然部署流程基本固定，依然还是容易出错。</p><h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><p>如果你很熟悉<strong>持续集成</strong>，一定会同意这样的观点：「使用它已经成为一种标配」。</p><p>如果你还不了解<strong>持续集成</strong>，这里可以<a href="https://www.ruanyifeng.com/blog/2015/09/continuous-integration.html">快速入门</a>。</p><p>市场上持续集成工具众多(Jenkins、Travis CI、Gitlab CI)，也有很多云平台集成了 CI/CID 服务（Coding、阿里云效等）。</p><p>之前我体验过 <a href="https://e.coding.net/">Coding</a> 平台的持续集成-构建计划，用于部署我自己的博客，相关文章和教程也发布在自己的博客，感兴趣的同学可以点击<a href="https://blog.gongsir.club/">传送门</a>学习。</p><p>最近整理 Github 项目，就想着体验一下使用 Travis CI 来实现项目的 CI，折腾了一天，无奈国内 Travis 文档稀缺，踩了很多坑，所以才来写了这篇文章，希望和同学们相互分享、学习！</p><h2 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>要实现 CI，首先得有一个项目，本文使用的项目：<a href="https://github.com/gongsir0630/wx-java-miniapp">gongsir0630/wx-java-miniapp</a></p><p>项目基于 Spring-Boot 搭建，可以通过 Maven 打包运行。</p><p>这里我希望每次提交代码到远程仓库后，travis 会自动编译打包项目，并上传到我的服务器，执行部署脚本，以实现项目自动部署，流程如下：</p><ul><li>修改代码</li><li>git 提交到远程仓库</li><li>travis 检测仓库变动，执行 <code>.travis.yml</code> 中的任务</li><li>maven 编译打包</li><li>上传 jar 到我的云服务器</li><li>远程执行部署脚本</li><li>邮件通知</li></ul><h3 id="GitHub-授权"><a href="#GitHub-授权" class="headerlink" title="GitHub 授权"></a>GitHub 授权</h3><p>进入<a href="https://www.travis-ci.com/">Travis 官网</a>，直接使用 Github 账号登录，登入成功之后，根据页面引导开通 GitHub 仓库访问授权，在 <a href="https://www.travis-ci.com/dashboard">Dashboard</a> 可以看到所有的授权仓库，可以给常用仓库加星标方便访问：</p><p><img src= "/blog/img/loading.gif" data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a4fbd78b8d99414b8ba448eb0cd5973a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p>注意 Travis 目前有两个官网：<a href="https://www.travis-ci.com/">travis-ci.com</a> 和 <a href="https://www.travis-ci.org/">travis-ci.org</a>. 官方通知后者即将关闭，所以我们使用前者。</p></blockquote><h3 id="开启项目监控"><a href="#开启项目监控" class="headerlink" title="开启项目监控"></a>开启项目监控</h3><p>在 <a href="https://www.travis-ci.com/dashboard">Dashboard</a> 页面选择想要开启 travis 功能的仓库，点击<code>Trigger a build</code>即可开启对该仓库的监听，travis 一旦监听到仓库变动，就会自动触发构建任务：</p><p><img src= "/blog/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/73aebcdc54dc4238aa9923452bd60101~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="travis-配置文件"><a href="#travis-配置文件" class="headerlink" title="travis 配置文件"></a>travis 配置文件</h3><p>在项目根目录添加<code>.travis.yml</code>文件，这里问题比较多，先上成功案例代码，再慢慢解释：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">java</span></span><br><span class="line"><span class="attr">os:</span> <span class="string">linux</span></span><br><span class="line"><span class="attr">dist:</span> <span class="string">xenial</span></span><br><span class="line"><span class="attr">jdk:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">openjdk8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">addons:</span></span><br><span class="line">  <span class="attr">ssh_known_hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">39.106</span><span class="number">.230</span><span class="number">.88</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span> <span class="string">mvn</span> <span class="string">clean</span> <span class="string">package</span> <span class="string">-Dmaven.test.skip=true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">scp</span> <span class="string">-o</span> <span class="string">stricthostkeychecking=no</span> <span class="string">-r</span> <span class="string">target/wx-java-miniapp-0.0.1-SNAPSHOT.jar</span> <span class="string">travis@yzhelp.top:/www/wwwroot/travis-app/wx-java-miniapp</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">ssh</span> <span class="string">travis@yzhelp.top</span> <span class="string">-o</span> <span class="string">stricthostkeychecking=no</span> <span class="string">&quot;sh /www/wwwroot/travis-app/wx-java-miniapp/restart.sh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line">  <span class="attr">email:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">gongsir0630@gmail.com</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="string">-K</span> <span class="string">$encrypted_f217180e22ee_key</span> <span class="string">-iv</span> <span class="string">$encrypted_f217180e22ee_iv</span></span><br><span class="line">  <span class="string">-in</span> <span class="string">id_rsa.enc</span> <span class="string">-out</span> <span class="string">~/.ssh/id_rsa</span> <span class="string">-d</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">echo</span> <span class="string">-e</span> <span class="string">&quot;Host yzhelp.top\n\tStrictHostKeyChecking no\n&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/config</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置思路：</p><ol><li>监测<code>main</code>分支变动，触发构建；</li><li>配置 ssh 免密登录自己的云服务器；</li><li>maven 项目打包；</li><li>scp 上传 jar 文件到运费服务器（免密操作）；</li><li>ssh 远程执行<code>restart.sh</code>部署脚本。</li></ol><blockquote><p><strong>注意</strong> 本文不介绍 travis 文件编写方法，因为我也是第一次学习，建议同学到官网先了解一下相关配置和执行周期。</p></blockquote><h4 id="配置-ssh-免密登录"><a href="#配置-ssh-免密登录" class="headerlink" title="配置 ssh 免密登录"></a>配置 ssh 免密登录</h4><p>在 travis 构建任务中不能进行命令交互，我们可以通过 ssh 命令免密登录自己的服务器，这就需要先生成密钥对，在本地生成秘钥对，执行以下命令会在<code>~/.ssh/</code>目录下生成<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>将公钥<code> id_rsa.pub</code>使用<code>ssh-copy-id</code>添加到服务器的受信列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i id_rsa.pub root@hostname</span><br></pre></td></tr></table></figure><p>修改本地<code>~/.ssh/config</code>文件，追加以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 远程主机名称</span><br><span class="line"><span class="title class_">Host</span> yzhelp.<span class="property">top</span></span><br><span class="line"># 远程主机域名或者 ip 地址</span><br><span class="line"><span class="title class_">HostName</span> yzhelp.<span class="property">top</span></span><br><span class="line"># 认证方式</span><br><span class="line"><span class="title class_">PreferredAuthentications</span> publickey</span><br><span class="line"># 私钥位置</span><br><span class="line"><span class="title class_">IdentityFile</span> /<span class="title class_">Users</span>/gongsir/.<span class="property">ssh</span>/id_rsa_yzhelp</span><br><span class="line"># 用户名</span><br><span class="line"><span class="title class_">User</span> root</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong> 如果你本机只有一对秘钥对，可以不用上述配置，如果有多对秘钥对，必须进行上述配置，否则登录时秘钥不会配对。</p></blockquote><p>测试免密登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@hostname</span><br></pre></td></tr></table></figure><p>这只是我们自己的电脑可以免密登录到服务器，我们需要配置 travis 的服务器可以免密登录到我们的云服务器，很简单，我们只需要把我们本地的私钥<code>id_rsa</code>复制一份给 travis 的服务器就可以了。</p><p>但是直接把私钥公布出去太危险了，travis 给我们提供了解决方案：</p><ul><li>在本地使用<code>travis-cli</code>工具对文件进行加密，生成<code>*.enc</code>文件</li><li>将解密串写入 travis 网站的环境变量中</li><li>执行构建任务时，使用解密串对加密文件进行解密即可得到原文件</li></ul><h4 id="文件加密"><a href="#文件加密" class="headerlink" title="文件加密"></a>文件加密</h4><p>不多说，官网有详细文档，直接上步骤。</p><p>本地安装<code>travis-cli</code>工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install travis</span><br></pre></td></tr></table></figure><p>登录 travis，这里坑就比较多了：</p><table><thead><tr><th>命令</th><th>提示信息</th><th>状态</th></tr></thead><tbody><tr><td><code>travis login --auto</code></td><td>提示输入 GitHub 的账号密码，登录失败</td><td>❌ Not Found</td></tr><tr><td><code>travis login --github-token token</code></td><td>登录成功，但是后续操作会提示 token 失效</td><td>✅ 可以登录，但是文件加密会提示 token 无效</td></tr><tr><td><code>travis login --github-token token --pro</code></td><td>登录成功</td><td>✅ 登陆成功</td></tr></tbody></table><p>这个环节折腾了大把时间，网上也没找到具体解决方法，这里说下流程：</p><ul><li><code>travis-cli</code> 默认登录的是 <a href="https://api.travis-ci.org/">ttps://api.travis-ci.org/</a></li><li>而我们授权的是 <a href="https://api.travis-ci.com/">ttps://api.travis-ci.com/</a></li><li>因此我们需要使用第三种登录方式，即加上 <code>--pro</code> 选项，此时所有请求都发向 <a href="https://api.travis-ci.com/">ttps://api.travis-ci.com/</a></li></ul><p>我们可以查看本地的 <code>~/.travis/config</code> 确认api：</p><p><img src= "/blog/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0c0d58d19d1446cb7a5df86143289db~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>登陆成功之后，对<code>id_rsa</code>进行加密，在项目根目录执行以下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此处的--add参数表示自动添加脚本到.travis.yml文件中</span></span><br><span class="line"><span class="comment"># 这里也需要加上 --pro 选项</span></span><br><span class="line">travis encrypt-file ~/.ssh/id_rsa --add --pro</span><br></pre></td></tr></table></figure><p>执行完上述命令，会产生的结果：</p><ul><li><p>本地新增<code>id_rsa.enc</code>，我们需要把这个文件上传到远程仓库供 travis 使用</p></li><li><p><code>.travis.yml</code>文件中会增加类似内容：</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="string">-K</span> <span class="string">$encrypted_f217180e22ee_key</span> <span class="string">-iv</span> <span class="string">$encrypted_f217180e22ee_iv</span></span><br><span class="line">  <span class="string">-in</span> <span class="string">id_rsa.enc</span> <span class="string">-out</span> <span class="string">id_rsa</span> <span class="string">-d</span></span><br></pre></td></tr></table></figure><ul><li><code>-in</code> 表示输入文件，即我们要解密的文件</li><li><code>-out</code> 表示解密后的文件，这里我们需要手动将路径修改为 <code>~/.ssh/id_rsa</code></li></ul></li><li><p>travis 仓库中会新增两个环境变量</p><p>  <img src= "/blog/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b52ad2fd858454a8d3b17792015ac78~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p></li></ul><p>经过以上步骤，travis 服务器成功获取到我们的秘钥文件<code>id_rsa</code>，为了保证后面能成功执行 ssh 免密登录，我们也需要配置一下权限和主机认证使用的秘钥文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">addons:</span></span><br><span class="line">  <span class="attr">ssh_known_hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">这里写自己的服务器的域名或</span> <span class="string">ip</span> <span class="string">地址</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="string">-K</span> <span class="string">$encrypted_f217180e22ee_key</span> <span class="string">-iv</span> <span class="string">$encrypted_f217180e22ee_iv</span></span><br><span class="line">  <span class="string">-in</span> <span class="string">id_rsa.enc</span> <span class="string">-out</span> <span class="string">~/.ssh/id_rsa</span> <span class="string">-d</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">echo</span> <span class="string">-e</span> <span class="string">&quot;Host 自己的服务器域名或 ip 地址\n\tStrictHostKeyChecking no\n&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/config</span></span><br></pre></td></tr></table></figure><h4 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h4><p>配置 <code>script</code> 即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">script:</span> <span class="string">mvn</span> <span class="string">clean</span> <span class="string">package</span> <span class="string">-Dmaven.test.skip=true</span></span><br></pre></td></tr></table></figure><h4 id="上传部署"><a href="#上传部署" class="headerlink" title="上传部署"></a>上传部署</h4><p>使用 scp 命令上传 jar 文件到服务器指定目录（预先创建），并执行部署脚本：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">after_success:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">scp</span> <span class="string">-o</span> <span class="string">stricthostkeychecking=no</span> <span class="string">-r</span> <span class="string">target/wx-java-miniapp-0.0.1-SNAPSHOT.jar</span> <span class="string">travis@yzhelp.top:/www/wwwroot/travis-app/wx-java-miniapp</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">ssh</span> <span class="string">travis@yzhelp.top</span> <span class="string">-o</span> <span class="string">stricthostkeychecking=no</span> <span class="string">&quot;sh /www/wwwroot/travis-app/wx-java-miniapp/restart.sh&quot;</span></span><br></pre></td></tr></table></figure><p>部署脚本（提供参考）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line">jarName=/www/wwwroot/travis-app/wx-java-miniapp/wx-java-miniapp-0.0.1-SNAPSHOT</span><br><span class="line"></span><br><span class="line">ps -ef|grep <span class="variable">$&#123;jarName&#125;</span>.jar|grep -v grep|awk <span class="string">&#x27;&#123;print &quot;kill -9 &quot;$2&#125;&#x27;</span>|sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;stop sucess&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">nohup</span> java -jar <span class="variable">$&#123;jarName&#125;</span>.jar &gt; <span class="variable">$&#123;jarName&#125;</span>.<span class="built_in">log</span> 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;jarName&#125;</span>.jar deploy sucess&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong> 这里说一下，部署脚本中包含 <code>nohup</code> 命令，一定要在脚本第一行声明 <code>source /etc/profile</code>，否则 ssh 获取不到环境变量，导致部署失败。</p></blockquote><h4 id="邮件通知"><a href="#邮件通知" class="headerlink" title="邮件通知"></a>邮件通知</h4><p>travis 构建完成之后，无论成功还是失败，都会邮件通知你：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">notifications:</span></span><br><span class="line">  <span class="attr">email:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">gongsir0630@gmail.com</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>提交 travis 规则到远程仓库，进入 travis 官网即可看到构建日志：</p><p><img src= "/blog/img/loading.gif" data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b710401a479b42e4813cfd53cf0499f9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>点击顶部的徽章还可以复制 md 格式添加到你的 readme 文件中：</p><p><img src= "/blog/img/loading.gif" data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd6ab71c767344bebfdf9aa0cae6e78a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="总结-amp-相关链接"><a href="#总结-amp-相关链接" class="headerlink" title="总结 &amp; 相关链接"></a>总结 &amp; 相关链接</h2><p>以上就是使用 Travis 打造 SpringBoot 应用持续集成和自动部署的全过程，希望能和大家一起分享学习，如果对你有帮助，还请点个赞支持一下，谢谢！</p><p>相关链接：</p><ul><li><a href="https://github.com/gongsir0630/wx-java-miniapp">示例项目 | wx-java-miniapp</a></li><li><a href="https://docs.travis-ci.com/">Travis 官网文档</a></li><li><a href="https://juejin.cn/post/6844903808758185998">参考文章：用 Travis CI 打造大前端持续集成和自动化部署</a></li><li><a href="https://juejin.cn/post/6844903957215576078">参考文章：利用Travis CI+GitHub实现持续集成和自动部署</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 原创 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Travis CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Shiro | JWT整合WxJava实现微信小程序登录</title>
      <link href="/blog/2021/03/26/shiro-jwt-demo.html"/>
      <url>/blog/2021/03/26/shiro-jwt-demo.html</url>
      
        <content type="html"><![CDATA[<p>掘金原文体验更加<a href="https://juejin.cn/post/6942706988534988836">👉👉戳这里</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在做毕业设计，涉及到微信小程序的开发，要求前端小程序用户使用微信身份登录，登陆成功后，后台返回自定义登录状态token给小程序，后续小程序发送API请求都需要携带token才能访问后台数据。</p><p>本文是对接微信小程序，实现自定义登录状态的一个完整示例，实现了小程序的自定义登陆，将自定义登陆态token返回给小程序作为登陆凭证。用户的信息保存在数据库中，登陆态token缓存在redis中。涉及的技术栈：</p><ul><li>SpringBoot -&gt; 后端基础环境</li><li>Shiro -&gt; 安全框架</li><li>JWT -&gt; 加密token</li><li>MySQL -&gt; 主库，存储业务数据</li><li>MyBatis-Plus -&gt; 操作数据库</li><li>Redis -&gt; 缓存token和其他热点数据</li><li>Lombok -&gt; 简化开发</li><li>FastJson -&gt; json消息处理</li><li>RestTemplate -&gt; 优雅的处理web请求</li></ul><p>项目GitHub地址：<a href="https://github.com/gongsir0630/shiro-jwt-demo">https://github.com/gongsir0630/shiro-jwt-demo</a></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>基于WxJava对接微信小程序，实现用户登录、消息处理</li><li>支持Shiro注解编程，保持高度的灵活性</li><li>使用JWT进行校验，完全实现无状态鉴权</li><li>使用Redis存储自定义登陆态token，支持过期时间</li><li>支持跨域请求</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><strong>基础知识预备：</strong></p><ul><li>具备SpringBoot基础知识并且会使用基本注解；</li><li>了解JWT（Json Web Token）的基本概念，并且会简单操作JWT的 <a href="https://github.com/auth0/java-jwt">JAVA SDK</a>；</li><li>了解Shiro的基本概念：Subject、Realm、SecurityManager等（建议去官网学习一下）</li></ul><p><strong>其他说明：</strong></p><p>本文只对shiro和jwt整合进行介绍说明，具体的微信登录实现是使用<code>RestTemplate</code>调用我自己的<code>wx-java-miniapp</code>项目，该项目基于<code>WxJava</code>实现，支持多个小程序登录、消息处理。</p><p><strong>本文使用以下调用处理即可：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. todo: 微信登录: code + appid -&gt; openId + session_key</span></span><br><span class="line"><span class="comment">// appid: 从配置文件读取</span></span><br><span class="line">MultiValueMap&lt;String, Object&gt; request = <span class="keyword">new</span> <span class="title class_">LinkedMultiValueMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 参数封装, 微信登录需要以下参数</span></span><br><span class="line">request.add(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line"><span class="comment">// eg: http://localhost:8081/wx/user/&#123;appid&#125;/login</span></span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> url+<span class="string">&quot;/user/&quot;</span>+appid+<span class="string">&quot;/login&quot;</span>;</span><br><span class="line"><span class="comment">// 请求</span></span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">dto</span> <span class="operator">=</span> restTemplate.postForObject(path, request, JSONObject.class);</span><br><span class="line">log.info(<span class="string">&quot;---&gt;&gt;&gt;来自[&#123;&#125;]的返回 = [&#123;&#125;]&quot;</span>,path,dto);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. todo: 使用openId和session_key生成自定义登录状态 -&gt; token</span></span><br></pre></td></tr></table></figure><p><strong>项目地址：</strong></p><ul><li><a href="https://github.com/gongsir0630/wx-java-miniapp">wx-java-miniapp -&gt; 可以直接部署使用</a></li><li><a href="https://github.com/Wechat-Group/WxJava">WxJava -&gt; 官方SDK</a></li></ul><h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><p>先了解一下小程序官方登录流程，<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/login.html">官方说明戳这里</a></p><p><img src= "/blog/img/loading.gif" data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c7b2c5fa55c46fbbd41976635b20807~tplv-k3u1fbpfcp-watermark.image" alt="小程序登录流程"></p><ol><li>小程序调用<code>wx.login()</code>得到<code>code</code>，将code发送到后台，后台通过<code>wx-java-miniapp</code>获取到用户的<code>openId</code>和<code>session_key</code>；</li><li>后台通过jwt工具生成自定义用户状态信息<code>token</code>，并且后台在数据库中查询<code>openId</code>判断是否存在，根据查询结果封装不同的消息，最后连同<code>token</code>一起返回给小程序；</li><li>之后用户访问每一个需要权限的API请求必须在<code>header</code>中添加<code>Authorization</code>字段，后台会进行<code>token</code>的校验，如果有误会直接返回<code>401</code>。</li></ol><h2 id="token加密说明"><a href="#token加密说明" class="headerlink" title="token加密说明"></a>token加密说明</h2><ul><li>使用<code>uuid</code>随机生成一个jwt-id</li><li>将用户的<code>openId</code>、<code>session_key</code>连同<code>jwt-id</code>一起，使用小程序的<code>appid</code>进行签名加密并设置过期时间，最终生成<code>token</code></li><li>将<code>&quot;JWT-SESSION-&quot;+jwt-id</code>和<code>token</code>以key-value的形式存入<code>redis</code>中，并设置相同的过期时间</li></ul><h2 id="token校验说明"><a href="#token校验说明" class="headerlink" title="token校验说明"></a>token校验说明</h2><ul><li>解析token中jwt-id</li><li>以<code>&quot;JWT-SESSION-&quot;+jwt-id</code>为key从redis中获取redisToken</li><li>解析<code>redisToken</code>的携带信息，重新以相同的方式生成验证器，同<code>token</code>进行校验比对</li></ul><h2 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h2><ul><li>项目数据库使用<code>MySQL</code>作为作为主库，如果是<code>clone</code>的项目，请在运行之前准备好相应的数据库，并修改配置信息。</li><li>项目使用了redis缓存，运行前请在本地安装<code>redis</code>，使用默认配置即可，无需修改。</li><li>项目中使用了<code>lombok</code>简化开发，请在idea或者eclipse安装lombok插件。</li></ul><h3 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h3><p>新建一个SpringBoot项目，修改pom文件，添加相关dependency:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.gongsir0630<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-jwt-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>shiro-jwt-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- shiro: 用户认证\接口鉴权 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jwt: token认证 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- redis: 数据缓存 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入fastjson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- druid数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis-plus: 操作数据库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 工具: 简化model开发 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 单元测试工具 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.github.gongsir0630.shirodemo.ShiroJwtDemoApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意JDK版本：1.8</p></blockquote><h3 id="相关配置-工具准备"><a href="#相关配置-工具准备" class="headerlink" title="相关配置 | 工具准备"></a>相关配置 | 工具准备</h3><p>配置你的application.yml ，主要是配置你的小程序appid和url，还有你的数据库和redis。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置日志级别</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">    <span class="attr">level:</span></span><br><span class="line">        <span class="attr">org.springframework.web:</span> <span class="string">info</span></span><br><span class="line">        <span class="attr">com.github.gongsir0630.shirodemo:</span> <span class="string">debug</span></span><br><span class="line"><span class="comment"># dev环境配置文件</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="comment"># 数据库相关配置信息: 无需再本地安装mysql,使用yzhelp.top云端数据库</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shiro-jwt-demo</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">username</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="comment"># redis 配置信息: 在本地安装redis</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 服务启动的端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 微信小程序配置 appid / url</span></span><br><span class="line"><span class="attr">wx:</span></span><br><span class="line">    <span class="comment"># 小程序AppId</span></span><br><span class="line">    <span class="attr">appid:</span> <span class="string">appid</span></span><br><span class="line">    <span class="comment"># 自研小程序接口调用地址</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://localhost:8081/wx</span></span><br></pre></td></tr></table></figure><blockquote><p>说明：<br/>appid: 当前小程序的appid<br/>url: wx-java-miniapp项目接口地址</p></blockquote><h4 id="配置fastJson"><a href="#配置fastJson" class="headerlink" title="配置fastJson"></a>配置fastJson</h4><p>在启动类中配置<code>fastJson</code> -&gt; <strong>ShiroJwtDemoApplication.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gongsir &lt;a href=&quot;https://github.com/gongsir0630&quot;&gt;程序员Kyle✨&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * 描述: Spring Boot 工程启动类,可以直接点击下面的main方法运行程序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroJwtDemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ShiroJwtDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * fastjson 配置注入: 使用阿里巴巴的 fastjson 处理 json 信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> HttpMessageConverters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HttpMessageConverters <span class="title function_">fastJsonHttpMessageConverters</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 消息转换对象</span></span><br><span class="line">        <span class="type">FastJsonHttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastJsonHttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">// fastjson 配置</span></span><br><span class="line">        <span class="type">FastJsonConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastJsonConfig</span>();</span><br><span class="line">        config.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class="line">        config.setDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="comment">// 配置注入消息转换器</span></span><br><span class="line">        converter.setFastJsonConfig(config);</span><br><span class="line">        <span class="comment">// 让 spring 使用自定义的消息转换器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HttpMessageConverters</span>(converter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a>配置Redis</h4><p>配置Redis -&gt; <strong>RedisConfig.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 程序员Kyle✨ GitHub: https://github.com/gongsir0630</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/20 14:15</span></span><br><span class="line"><span class="comment"> * 你的指尖,拥有改变世界的力量</span></span><br><span class="line"><span class="comment"> * 描述: Redis配置</span></span><br><span class="line"><span class="comment"> * EnableCaching: 开启缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager.create(factory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置RestTemplate"><a href="#配置RestTemplate" class="headerlink" title="配置RestTemplate"></a>配置RestTemplate</h4><p>配置RestTemplate -&gt; <strong>RestTemplateConfig.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 程序员Kyle✨ GitHub: https://github.com/gongsir0630</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/20 14:10</span></span><br><span class="line"><span class="comment"> * 你的指尖,拥有改变世界的力量</span></span><br><span class="line"><span class="comment"> * 描述: RestTemplate的配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">(ClientHttpRequestFactory factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ClientHttpRequestFactory <span class="title function_">simpleClientHttpRequestFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SimpleClientHttpRequestFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleClientHttpRequestFactory</span>();</span><br><span class="line">        <span class="comment">// 连接超时时间设置为10秒</span></span><br><span class="line">        factory.setConnectTimeout(<span class="number">1000</span> * <span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 读取超时时间为单位为60秒</span></span><br><span class="line">        factory.setReadTimeout(<span class="number">1000</span> * <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回集封装"><a href="#返回集封装" class="headerlink" title="返回集封装"></a>返回集封装</h4><p><strong>CodeMsg.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 程序员Kyle✨ GitHub: https://github.com/gongsir0630</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/22 20:17</span></span><br><span class="line"><span class="comment"> * 你的指尖,拥有改变世界的力量</span></span><br><span class="line"><span class="comment"> * 描述: code和msg封装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeMsg</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CodeMsg SUCCESS=<span class="keyword">new</span> <span class="title class_">CodeMsg</span>(<span class="number">0</span>,<span class="string">&quot;success&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">CodeMsg</span> <span class="variable">LOGIN_FAIL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CodeMsg</span>(-<span class="number">1</span>,<span class="string">&quot;code2session failure, please try aging&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">CodeMsg</span> <span class="variable">NO_USER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CodeMsg</span>(<span class="number">1000</span>,<span class="string">&quot;user not found&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">CodeMsg</span> <span class="variable">SESSION_KEY_ERROR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CodeMsg</span>(<span class="number">1001</span>,<span class="string">&quot;sessionKey is invalid&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">CodeMsg</span> <span class="variable">TOKEN_ERROR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CodeMsg</span>(<span class="number">1002</span>,<span class="string">&quot;token is invalid&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">CodeMsg</span> <span class="variable">SHIRO_ERROR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CodeMsg</span>(<span class="number">1003</span>,<span class="string">&quot;token is invalid&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CodeMsg</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code=code;</span><br><span class="line">        <span class="built_in">this</span>.msg=msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CodeMsg&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;code=&quot;</span> + code +</span><br><span class="line">                <span class="string">&quot;, msg=&#x27;&quot;</span> + msg + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Result.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 程序员Kyle✨ GitHub: https://github.com/gongsir0630</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/20 18:45</span></span><br><span class="line"><span class="comment"> * 你的指尖,拥有改变世界的力量</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> * 输出结果的封装</span></span><br><span class="line"><span class="comment"> * 只要get不要set,进行更好的封装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; data泛型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Result</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.code=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.msg=<span class="string">&quot;success&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.data=data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Result</span><span class="params">(CodeMsg mg, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mg==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.code=mg.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg=mg.getMsg();</span><br><span class="line">        <span class="built_in">this</span>.data=data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功时</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; data泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt;  Result&lt;T&gt;  <span class="title function_">success</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;T&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; data泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt;  Result&lt;T&gt;  <span class="title function_">fail</span><span class="params">(CodeMsg mg, T data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;T&gt;(mg,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异常封装与处理"><a href="#异常封装与处理" class="headerlink" title="异常封装与处理"></a>异常封装与处理</h4><p>自定义异常 -&gt; <strong>ApiAuthException.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.gongsir0630.shirodemo.controller.res.CodeMsg;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 程序员Kyle✨ GitHub: https://github.com/gongsir0630</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/22 20:24</span></span><br><span class="line"><span class="comment"> * 你的指尖,拥有改变世界的力量</span></span><br><span class="line"><span class="comment"> * 描述: 自定义异常, 用于处理Api认证失败异常信息保存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiAuthException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CodeMsg codeMsg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ApiAuthException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ApiAuthException</span><span class="params">(CodeMsg codeMsg)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(codeMsg.getMsg());</span><br><span class="line">        <span class="built_in">this</span>.codeMsg = codeMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CodeMsg <span class="title function_">getCodeMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> codeMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCodeMsg</span><span class="params">(CodeMsg codeMsg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.codeMsg = codeMsg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局异常处理 -&gt; <strong>AppExceptionHandler.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 程序员Kyle✨ GitHub: https://github.com/gongsir0630</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/20 15:49</span></span><br><span class="line"><span class="comment"> * 你的指尖,拥有改变世界的力量</span></span><br><span class="line"><span class="comment"> * 描述: 全局异常处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理 Shiro 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> json</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;ShiroException.class&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.UNAUTHORIZED)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Result&lt;JSONObject&gt;&gt; <span class="title function_">handShiroException</span><span class="params">(ShiroException e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;---&gt;&gt;&gt; 捕捉到 [ApiAuthException] 异常: &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(Result.fail(CodeMsg.SHIRO_ERROR,<span class="literal">null</span>), HttpStatus.UNAUTHORIZED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理 自定义ApiAuthException异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> json</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;ApiAuthException.class&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.UNAUTHORIZED)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Result&lt;JSONObject&gt;&gt; <span class="title function_">handApiAuthException</span><span class="params">(ApiAuthException e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;---&gt;&gt;&gt; 捕捉到 [ApiAuthException] 异常: &#123;&#125;,&#123;&#125;&quot;</span>,e.getCodeMsg().getCode(),e.getCodeMsg().getMsg() );</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(Result.fail(e.getCodeMsg(),<span class="literal">null</span>), HttpStatus.UNAUTHORIZED);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="准备数据源"><a href="#准备数据源" class="headerlink" title="准备数据源"></a>准备数据源</h3><ul><li>数据库：shiro-jwt-demo</li><li>数据表：user<br><img src= "/blog/img/loading.gif" data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b52785aad974131a859d2a51feaa0ca~tplv-k3u1fbpfcp-watermark.image" alt="示例数据库表结构"></li></ul><blockquote><p>注意：这里是业务数据库，也就是我们小程序用户信息都由我们自己存储，第一次默认使用微信公开信息注册，之后用户可以自行更新这些信息，和微信信息独立开。</p></blockquote><p>创建对应的实体类 -&gt; <strong>User.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 程序员Kyle✨ GitHub: https://github.com/gongsir0630</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/21 23:44</span></span><br><span class="line"><span class="comment"> * 你的指尖,拥有改变世界的力量</span></span><br><span class="line"><span class="comment"> * 描述: 业务用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键,数据库字段为user_id -&gt; userId == openId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;user_id&quot;,type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String photo;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String grade;</span><br><span class="line">    <span class="keyword">private</span> String college;</span><br><span class="line">    <span class="keyword">private</span> String contact;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用MyBatis-plus创建mapper接口 -&gt; <strong>UserMapper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 程序员Kyle✨ GitHub: https://github.com/gongsir0630</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/22 19:44</span></span><br><span class="line"><span class="comment"> * 你的指尖,拥有改变世界的力量</span></span><br><span class="line"><span class="comment"> * 描述: User类mapper接口,继承自BaseMapper(已经实现User的CRUD)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyBatis-Plus配置 -&gt; <strong>MybatisPlusConfig.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 程序员Kyle✨ GitHub: https://github.com/gongsir0630</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/19 17:15</span></span><br><span class="line"><span class="comment"> * 你的指尖,拥有改变世界的力量</span></span><br><span class="line"><span class="comment"> * 描述: MyBatis-Plus插件配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.github.gongsir0630.shirodemo.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建User业务接口，这里仅仅演示login -&gt; <strong>UserService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 程序员Kyle✨ GitHub: https://github.com/gongsir0630</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/22 19:49</span></span><br><span class="line"><span class="comment"> * 你的指尖,拥有改变世界的力量</span></span><br><span class="line"><span class="comment"> * 描述: 用户接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsCode 小程序code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 登录信息: 包含token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;String, String&gt; <span class="title function_">login</span><span class="params">(String jsCode)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再创建一个微信登录信息对象，主要用作接收微信的openid和session_key，以及用作shiro认证 -&gt; <strong>WxAccount.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> * <span class="meta">@author</span> 程序员Kyle✨ GitHub: https:<span class="comment">//github.com/gongsir0630</span></span><br><span class="line"> * <span class="meta">@date</span> <span class="number">2021</span>/<span class="number">3</span>/<span class="number">22</span> <span class="number">19</span>:<span class="number">58</span></span><br><span class="line"> * 你的指尖,拥有改变世界的力量</span><br><span class="line"> * 描述: 微信认证信息</span><br><span class="line"> */</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxAccount</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String openId;</span><br><span class="line">    <span class="keyword">private</span> String sessionKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：该类不会用于业务信息交互，所以不需要Mapper与db交互。</p></blockquote><p>微信登录接口，在这里实现与微信服务器的信息交互 -&gt; <strong>WxAccountService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> * <span class="meta">@author</span> 程序员Kyle✨ GitHub: https:<span class="comment">//github.com/gongsir0630</span></span><br><span class="line"> * <span class="meta">@date</span> <span class="number">2021</span>/<span class="number">3</span>/<span class="number">22</span> <span class="number">20</span>:<span class="number">06</span></span><br><span class="line"> * 你的指尖,拥有改变世界的力量</span><br><span class="line"> * 描述: 微信接口</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WxAccountService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信小程序用户登陆，完整流程可参考下面官方地址，本例中是按此流程开发</span></span><br><span class="line"><span class="comment">     * https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/login.html</span></span><br><span class="line"><span class="comment">     * 1 . 微信小程序端传入code。</span></span><br><span class="line"><span class="comment">     * 2 . 通过wx-java-miniapp项目调用微信code2session接口获取openid和session_key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 小程序端 调用 wx.login 获取到的code,用于调用 微信code2session接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JSONObject: 包含openId和sessionKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WxAccount <span class="title function_">login</span><span class="params">(String code)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口实现逻辑：</p><ol><li>从配置文件读取<code>appid</code>和<code>url</code>；</li><li>凭借目标请求地址<code>path</code>，例如登录是 <code>&#123;url&#125;/wx/user/&#123;appid&#125;/login</code>；</li><li>参数封装，封装来自小程序的<code>code</code>；</li><li>使用<code>RestTemplate</code>发起登录请求；</li><li>处理返回集。</li></ol><p>代码实现 -&gt; <strong>WxAccountServiceImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 程序员Kyle✨ GitHub: https://github.com/gongsir0630</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/20 16:12</span></span><br><span class="line"><span class="comment"> * 你的指尖,拥有改变世界的力量</span></span><br><span class="line"><span class="comment"> * 描述: 微信接口实现: 用 restTemplate 调用 [wxApp] 应用的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxAccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">WxAccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;wx.appid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appid;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;wx.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WxAccount <span class="title function_">login</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="comment">// todo: 微信登录: code + appid -&gt; openId + session_key</span></span><br><span class="line">        <span class="comment">// appid: 从配置文件读取</span></span><br><span class="line">        MultiValueMap&lt;String, Object&gt; request = <span class="keyword">new</span> <span class="title class_">LinkedMultiValueMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 参数封装, 微信登录需要以下参数</span></span><br><span class="line">        request.add(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line">        <span class="comment">// eg: http://localhost:8081/wx/user/&#123;appid&#125;/login</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> url+<span class="string">&quot;/user/&quot;</span>+appid+<span class="string">&quot;/login&quot;</span>;</span><br><span class="line">        <span class="comment">// 请求</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">dto</span> <span class="operator">=</span> restTemplate.postForObject(path, request, JSONObject.class);</span><br><span class="line">        log.info(<span class="string">&quot;---&gt;&gt;&gt;来自[&#123;&#125;]的返回 = [&#123;&#125;]&quot;</span>,path,dto);</span><br><span class="line">        <span class="type">int</span> <span class="variable">errCode</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (dto != <span class="literal">null</span> ) &#123;</span><br><span class="line">            errCode = Integer.parseInt(dto.get(<span class="string">&quot;code&quot;</span>).toString());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApiAuthException</span>(CodeMsg.LOGIN_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> != errCode) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApiAuthException</span>(<span class="keyword">new</span> <span class="title class_">CodeMsg</span>(Integer.parseInt(dto.get(<span class="string">&quot;code&quot;</span>).toString()),</span><br><span class="line">                dto.get(<span class="string">&quot;msg&quot;</span>).toString()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// code2session success</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> dto.getJSONObject(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJavaObject(data, WxAccount.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建JWT"><a href="#构建JWT" class="headerlink" title="构建JWT"></a>构建JWT</h3><p>jwt工具类，用于生成token签名, token校验 -&gt; <strong>JwtUtil.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 程序员Kyle✨ GitHub: https://github.com/gongsir0630</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/23 10:26</span></span><br><span class="line"><span class="comment"> * 你的指尖,拥有改变世界的力量</span></span><br><span class="line"><span class="comment"> * 描述: jwt工具类: 生成token签名, token校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;All&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期时间: 2小时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">EXPIRE_TIME</span> <span class="operator">=</span> <span class="number">7200</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 appid 签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;wx.appid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appsecret;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据微信用户登陆信息创建 token</span></span><br><span class="line"><span class="comment">     * 使用`uuid`随机生成一个jwt-id</span></span><br><span class="line"><span class="comment">     * 将用户的`openId`、`session_key`连同`jwt-id`一起，使用小程序的`appid`进行签名加密并设置过期时间，最终生成`token`</span></span><br><span class="line"><span class="comment">     * 将`&quot;JWT-SESSION-&quot;+jwt-id`和`token`以key-value的形式存入`redis`中，并设置相同的过期时间</span></span><br><span class="line"><span class="comment">     * 注 : 这里的token会被缓存到redis中,用作为二次验证</span></span><br><span class="line"><span class="comment">     * redis里面缓存的时间应该和jwt token的过期时间设置相同</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wxAccount 微信用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回 jwt token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sign</span><span class="params">(WxAccount account)</span> &#123;</span><br><span class="line">        <span class="comment">//JWT 随机ID,做为redis验证的key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtId</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">//1 . 加密算法进行签名得到token</span></span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(appsecret);</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWT.create()</span><br><span class="line">                .withClaim(<span class="string">&quot;openId&quot;</span>, account.getOpenId())</span><br><span class="line">                .withClaim(<span class="string">&quot;sessionKey&quot;</span>, account.getSessionKey())</span><br><span class="line">                .withClaim(<span class="string">&quot;jwt-id&quot;</span>,jwtId)</span><br><span class="line">                .withExpiresAt(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + EXPIRE_TIME * <span class="number">1000</span>))</span><br><span class="line">                .sign(algorithm);</span><br><span class="line">        <span class="comment">//2 . Redis缓存JWT, 注 : 请和JWT过期时间一致</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;JWT-SESSION-&quot;</span>+jwtId, token, EXPIRE_TIME, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token 检验</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1 . 根据token解密，解密出jwt-id , 先从redis中查找出redisToken，匹配是否相同</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">redisToken</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;JWT-SESSION-&quot;</span> + getClaimsByToken(token).get(<span class="string">&quot;jwt-id&quot;</span>).asString());</span><br><span class="line">            <span class="keyword">if</span> (!token.equals(redisToken)) &#123;</span><br><span class="line">                <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2 . 得到算法相同的JWTVerifier</span></span><br><span class="line">            <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(appsecret);</span><br><span class="line">            <span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(algorithm)</span><br><span class="line">                    .withClaim(<span class="string">&quot;openId&quot;</span>, getClaimsByToken(redisToken).get(<span class="string">&quot;openId&quot;</span>).asString())</span><br><span class="line">                    .withClaim(<span class="string">&quot;sessionKey&quot;</span>, getClaimsByToken(redisToken).get(<span class="string">&quot;sessionKey&quot;</span>).asString())</span><br><span class="line">                    .withClaim(<span class="string">&quot;jwt-id&quot;</span>,getClaimsByToken(redisToken).get(<span class="string">&quot;jwt-id&quot;</span>).asString())</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="comment">//3 . 验证token</span></span><br><span class="line">            verifier.verify(token);</span><br><span class="line">            <span class="comment">//4 . Redis缓存JWT续期</span></span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;JWT-SESSION-&quot;</span> + getClaimsByToken(token).get(<span class="string">&quot;jwt-id&quot;</span>).asString(),</span><br><span class="line">                    redisToken,</span><br><span class="line">                    EXPIRE_TIME,</span><br><span class="line">                    TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">return</span> Boolean.TRUE;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//捕捉到任何异常都视为校验失败</span></span><br><span class="line">            <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从token解密信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JWTDecodeException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Claim&gt; <span class="title function_">getClaimsByToken</span><span class="params">(String token)</span> <span class="keyword">throws</span> JWTDecodeException &#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.decode(token).getClaims();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Realm配置"><a href="#Realm配置" class="headerlink" title="Realm配置"></a>Realm配置</h3><p>创建JwtToken，用于shiro鉴权，需要实现<code>AuthenticationToken</code> -&gt; <strong>JwtToken.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 程序员Kyle✨ GitHub: https://github.com/gongsir0630</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/23 10:48</span></span><br><span class="line"><span class="comment"> * 你的指尖,拥有改变世界的力量</span></span><br><span class="line"><span class="comment"> * 描述: 鉴权用的token，需要实现 AuthenticationToken</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtToken</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationToken</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getPrincipal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getCredentials</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义Shiro的Realm配置，需要在Realm中实现我们自定义的登陆及授权逻辑 -&gt; <strong>ShiroRealm.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.gongsir0630.shirodemo.controller.res.CodeMsg;</span><br><span class="line"><span class="keyword">import</span> com.github.gongsir0630.shirodemo.exception.ApiAuthException;</span><br><span class="line"><span class="keyword">import</span> com.github.gongsir0630.shirodemo.wx.util.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> com.github.gongsir0630.shirodemo.wx.vo.JwtToken;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.credential.CredentialsMatcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.Realm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 程序员Kyle✨ GitHub: https://github.com/gongsir0630</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/23 15:28</span></span><br><span class="line"><span class="comment"> * 你的指尖,拥有改变世界的力量</span></span><br><span class="line"><span class="comment"> * 描述: Realm 的一个配置管理类 allRealm()方法得到所有的realm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封装所有自定义的realm规则链 -&gt; shiro配置中会将规则注入到shiro的securityManager</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 所有自定义的realm规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Realm&gt; <span class="title function_">allRealm</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Realm&gt; realmList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        realmList.add(authorizingRealm());</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableList(realmList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义 JWT的 Realm</span></span><br><span class="line"><span class="comment">     * 重写 Realm 的 supports() 方法是通过 JWT 进行登录判断的关键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AuthorizingRealm <span class="title function_">authorizingRealm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AuthorizingRealm</span> <span class="variable">realm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthorizingRealm</span>() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 当需要检测 用户权限 时调用此方法，例如checkRole,checkPermission之类的</span></span><br><span class="line"><span class="comment">             * 根据业务需求自行编写验证逻辑</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> principalCollection == token</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> principalCollection.toString();</span><br><span class="line">                log.info(<span class="string">&quot;---&gt;&gt;&gt;PrincipalCollection: [&#123;&#125;]&quot;</span>,token);</span><br><span class="line">                <span class="comment">// todo: 自定义权限验证, 比如role和permission验证</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 默认使用此方法进行用户名正确与否校验: 验证token逻辑</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> (String) authenticationToken.getCredentials();</span><br><span class="line">                <span class="type">String</span> <span class="variable">openId</span> <span class="operator">=</span> jwtUtil.getClaimsByToken(jwtToken).get(<span class="string">&quot;openId&quot;</span>).asString();</span><br><span class="line">                <span class="type">String</span> <span class="variable">sessionKey</span> <span class="operator">=</span> jwtUtil.getClaimsByToken(jwtToken).get(<span class="string">&quot;sessionKey&quot;</span>).asString();</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == openId || <span class="string">&quot;&quot;</span>.equals(openId)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApiAuthException</span>(CodeMsg.NO_USER);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == sessionKey || <span class="string">&quot;&quot;</span>.equals(sessionKey)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApiAuthException</span>(CodeMsg.SESSION_KEY_ERROR);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!jwtUtil.verify(jwtToken)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApiAuthException</span>(CodeMsg.TOKEN_ERROR);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将 openId 和 sessionKey 装配到subject中</span></span><br><span class="line">                <span class="comment">// 在 Controller 中使用 SecurityUtils.getSubject().getPrincipal() 即可获取用户openId</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(openId,sessionKey,<span class="built_in">this</span>.getClass().getName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 注意坑点 : 必须重写此方法，不然Shiro会报错</span></span><br><span class="line"><span class="comment">             * 因为创建了 JWTToken 用于替换Shiro原生 token,所以必须在此方法中显式的进行替换，否则在进行判断时会一直失败</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(AuthenticationToken token)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> token <span class="keyword">instanceof</span> JwtToken;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        realm.setCredentialsMatcher(credentialsMatcher());</span><br><span class="line">        <span class="keyword">return</span> realm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注意 : 密码校验, 这里因为是JWT形式,就无需密码校验和加密,直接让其返回为true(如果不设置的话,该值默认为false,即始终验证不通过)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> CredentialsMatcher <span class="title function_">credentialsMatcher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 实现boolean doCredentialsMatch(AuthenticationToken var1, AuthenticationInfo var2);</span></span><br><span class="line">        <span class="keyword">return</span> (authenticationToken, authenticationInfo) -&gt; <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重写filter"><a href="#重写filter" class="headerlink" title="重写filter"></a>重写filter</h3><p>所有的请求都会先经过<code>Filter</code>，所以我们继承官方的<code>BasicHttpAuthenticationFilter</code>，并且重写方法即可 -&gt; <strong>JwtFilter.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.gongsir0630.shirodemo.wx.vo.JwtToken;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 程序员Kyle✨ GitHub: https://github.com/gongsir0630</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/23 10:58</span></span><br><span class="line"><span class="comment"> * 你的指尖,拥有改变世界的力量</span></span><br><span class="line"><span class="comment"> * 描述: JWT核心过滤器配置</span></span><br><span class="line"><span class="comment"> * 所有的请求都会先经过Filter，继承官方的BasicHttpAuthenticationFilter，并且重写鉴权的方法</span></span><br><span class="line"><span class="comment"> * 执行流程 preHandle-&gt;isAccessAllowed-&gt;isLoginAttempt-&gt;executeLogin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtFilter</span> <span class="keyword">extends</span> <span class="title class_">BasicHttpAuthenticationFilter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跨域支持</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 相应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">httpServletResponse</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">&quot;Access-control-Allow-Origin&quot;</span>, httpServletRequest.getHeader(<span class="string">&quot;Origin&quot;</span>));</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;GET,POST,OPTIONS,PUT,DELETE&quot;</span>);</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, httpServletRequest.getHeader(<span class="string">&quot;Access-Control-Request-Headers&quot;</span>));</span><br><span class="line">        <span class="comment">// 跨域时会首先发送一个option请求，这里我们给option请求直接返回正常状态</span></span><br><span class="line">        <span class="keyword">if</span> (httpServletRequest.getMethod().equals(RequestMethod.OPTIONS.name())) &#123;</span><br><span class="line">            httpServletResponse.setStatus(HttpStatus.OK.value());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.preHandle(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isLoginAttempt</span><span class="params">(ServletRequest request, ServletResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断request是否包含 Authorization 字段</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">auth</span> <span class="operator">=</span> getAuthzHeader(request);</span><br><span class="line">        <span class="keyword">return</span> auth != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(auth);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isLoginAttempt(request,response)) &#123;</span><br><span class="line">            <span class="comment">// executeLogin 进入登录逻辑</span></span><br><span class="line">            <span class="comment">// 从request请求头获取 Authorization 字段</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> getAuthzHeader(request);</span><br><span class="line">            log.info(<span class="string">&quot;---&gt;&gt;&gt;JwtFilter::isAccessAllowed拦截到认证token信息:[&#123;&#125;]&quot;</span>,token);</span><br><span class="line">            <span class="comment">// 这里会提交给刚刚我们自定义的realm处理</span></span><br><span class="line">            getSubject(request,response).login(<span class="keyword">new</span> <span class="title class_">JwtToken</span>(token));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里返回true表示所有验证结果都能通过, 在controller中可以使用shiro注解限制是否需要登录权限</span></span><br><span class="line">        <span class="comment">// 设置true即允许游客访问</span></span><br><span class="line">        <span class="comment">// 设置false则必须携带token进行验证</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Shiro核心配置"><a href="#Shiro核心配置" class="headerlink" title="Shiro核心配置"></a>Shiro核心配置</h3><p>核心配置 -&gt; <strong>ShiroConfig.java</strong></p><ul><li>配置realm规则链</li><li>配置访问策略：url和filter</li><li>开启shiro注解支持</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.gongsir0630.shirodemo.filter.JwtFilter;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSessionStorageEvaluator;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSubjectDAO;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.LifecycleBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.DependsOn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 程序员Kyle✨ GitHub: https://github.com/gongsir0630</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/20 16:48</span></span><br><span class="line"><span class="comment"> * 你的指尖,拥有改变世界的力量</span></span><br><span class="line"><span class="comment"> * 描述: shiro核心配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SecurityManager,安全管理器,所有与安全相关的操作都会与之进行交互;</span></span><br><span class="line"><span class="comment">     * 它管理着所有Subject,所有Subject都绑定到SecurityManager,与Subject的所有交互都会委托给SecurityManager</span></span><br><span class="line"><span class="comment">     * DefaultWebSecurityManager :</span></span><br><span class="line"><span class="comment">     * 会创建默认的DefaultSubjectDAO(它又会默认创建DefaultSessionStorageEvaluator)</span></span><br><span class="line"><span class="comment">     * 会默认创建DefaultWebSubjectFactory</span></span><br><span class="line"><span class="comment">     * 会默认创建ModularRealmAuthenticator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(ShiroRealm shiroRealm)</span> &#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">// 设置realms</span></span><br><span class="line">        securityManager.setRealms(shiroRealm.allRealm());</span><br><span class="line">        <span class="comment">// close session</span></span><br><span class="line">        <span class="type">DefaultSubjectDAO</span> <span class="variable">defaultSubjectDAO</span> <span class="operator">=</span> (DefaultSubjectDAO) securityManager.getSubjectDAO();</span><br><span class="line">        <span class="type">DefaultSessionStorageEvaluator</span> <span class="variable">evaluator</span> <span class="operator">=</span> (DefaultSessionStorageEvaluator) defaultSubjectDAO.getSessionStorageEvaluator();</span><br><span class="line">        evaluator.setSessionStorageEnabled(Boolean.FALSE);</span><br><span class="line">        defaultSubjectDAO.setSessionStorageEvaluator(evaluator);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置Shiro的访问策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">filterFactoryBean</span><span class="params">(DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        Map&lt;String, Filter&gt; filterMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;jwt&quot;</span>, <span class="keyword">new</span> <span class="title class_">JwtFilter</span>());</span><br><span class="line">        factoryBean.setFilters(filterMap);</span><br><span class="line">        factoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; filterRuleMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">        <span class="comment">//登陆相关api不需要被过滤器拦截</span></span><br><span class="line">        filterRuleMap.put(<span class="string">&quot;/user/login/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        <span class="comment">// 所有请求通过JWT Filter</span></span><br><span class="line">        filterRuleMap.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;jwt&quot;</span>);</span><br><span class="line">        factoryBean.setFilterChainDefinitionMap(filterRuleMap);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加注解支持</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@DependsOn(&quot;lifecycleBeanPostProcessor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title function_">defaultAdvisorAutoProxyCreator</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DefaultAdvisorAutoProxyCreator</span> <span class="variable">advisorAutoProxyCreator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAdvisorAutoProxyCreator</span>();</span><br><span class="line">        advisorAutoProxyCreator.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> advisorAutoProxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加注解依赖</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LifecycleBeanPostProcessor <span class="title function_">lifecycleBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LifecycleBeanPostProcessor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启注解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title function_">authorizationAttributeSourceAdvisor</span><span class="params">(DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="type">AuthorizationAttributeSourceAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthorizationAttributeSourceAdvisor</span>();</span><br><span class="line">        advisor.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> advisor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>实现UserService中的login方法 -&gt; <strong>UserServiceImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.github.gongsir0630.shirodemo.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.github.gongsir0630.shirodemo.model.User;</span><br><span class="line"><span class="keyword">import</span> com.github.gongsir0630.shirodemo.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.github.gongsir0630.shirodemo.wx.model.WxAccount;</span><br><span class="line"><span class="keyword">import</span> com.github.gongsir0630.shirodemo.wx.service.WxAccountService;</span><br><span class="line"><span class="keyword">import</span> com.github.gongsir0630.shirodemo.wx.util.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 程序员Kyle✨ GitHub: https://github.com/gongsir0630</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/23 11:19</span></span><br><span class="line"><span class="comment"> * 你的指尖,拥有改变世界的力量</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WxAccountService wxAccountService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">login</span><span class="params">(String jsCode)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; res = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">WxAccount</span> <span class="variable">wxAccount</span> <span class="operator">=</span> wxAccountService.login(jsCode);</span><br><span class="line">        log.info(<span class="string">&quot;---&gt;&gt;&gt;wxAccount信息:[&#123;&#125;]&quot;</span>,wxAccount);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(wxAccount.getOpenId());</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// todo: 用户不存在, 提醒用户提交注册信息</span></span><br><span class="line">            res.put(<span class="string">&quot;canLogin&quot;</span>,Boolean.FALSE.toString());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.put(<span class="string">&quot;canLogin&quot;</span>,Boolean.TRUE.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        res.put(<span class="string">&quot;token&quot;</span>, jwtUtil.sign(wxAccount));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建controller，编写测试api -&gt; <strong>UserController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.github.gongsir0630.shirodemo.controller.res.CodeMsg;</span><br><span class="line"><span class="keyword">import</span> com.github.gongsir0630.shirodemo.controller.res.Result;</span><br><span class="line"><span class="keyword">import</span> com.github.gongsir0630.shirodemo.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.annotation.RequiresAuthentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 程序员Kyle✨ GitHub: https://github.com/gongsir0630</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/23 11:12</span></span><br><span class="line"><span class="comment"> * 你的指尖,拥有改变世界的力量</span></span><br><span class="line"><span class="comment"> * 描述: 用户信息接口类,包含小程序登录注册</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从认证信息中获取用户Id: userId == openId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> userId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getUserId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityUtils.getSubject().getPrincipal().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小程序用户登录接口: 通过js_code换取openId, 判断用户是否已经注册</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code wx.login() 得到的code凭证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Result&lt;JSONObject&gt;&gt; <span class="title function_">login</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(code)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(Result.fail(<span class="keyword">new</span> <span class="title class_">CodeMsg</span>(<span class="number">401</span>,<span class="string">&quot;code is empty&quot;</span>), <span class="literal">null</span>), HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;---&gt;接收到来自小程序端的code:[&#123;&#125;]&quot;</span>,code);</span><br><span class="line">        <span class="comment">// todo: 使用 code -&gt; wxAccountService.login() -&gt; openId,session_key</span></span><br><span class="line">        Map&lt;String, String&gt; loginMap = userService.login(code);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">canLogin</span> <span class="operator">=</span> Boolean.parseBoolean(loginMap.get(<span class="string">&quot;canLogin&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> loginMap.get(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        data.put(<span class="string">&quot;token&quot;</span>,token);</span><br><span class="line">        data.put(<span class="string">&quot;canLogin&quot;</span>,canLogin);</span><br><span class="line">        log.info(<span class="string">&quot;---&gt;&gt;&gt;返回认证信息:[&#123;&#125;]&quot;</span>, data.toString());</span><br><span class="line">        <span class="keyword">if</span> (!canLogin) &#123;</span><br><span class="line">            <span class="comment">// todo: 用户不存在,提示用户注册</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(Result.fail(CodeMsg.NO_USER,data),HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(Result.success(data),HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 RequiresAuthentication 注解, 需要验证才能访问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> userId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@RequiresAuthentication</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Result&lt;JSONObject&gt;&gt; <span class="title function_">requireAuth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        data.put(<span class="string">&quot;hello&quot;</span>,getUserId());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(Result.success(data),HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写小程序测试代码获取<code>code</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">login</span>(&#123;</span><br><span class="line">   <span class="attr">timeout</span>: <span class="number">3000</span>,</span><br><span class="line">   <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src= "/blog/img/loading.gif" data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ea0c2f0c10e40bb9d898198fd88d731~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>启动 <a href="https://github.com/wx-java-miniapp"><code>wx-java-miniapp</code></a>项目：</p><p><img src= "/blog/img/loading.gif" data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef5a62b16daa4687a1924d599037db3e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>启动<code>shiro-jwt-demo</code>项目：</p><p><img src= "/blog/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2a4d81669bc4813845add1d598674a0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>Postman测试认证：</p><p><img src= "/blog/img/loading.gif" data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f23e79dc4fb4494951768161c67b2f6~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>携带token访问：</p><p><img src= "/blog/img/loading.gif" data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70eb9247eedc431d803bfc61484f2ee1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上就是基于Shiro、JWT实现微信小程序登录完整例子的逻辑过程说明及其实现。</p><ul><li>完整项目地址：<a href="https://github.com/gongsir0630/shiro-jwt-demo">https://github.com/gongsir0630/shiro-jwt-demo</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 原创 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>荣耀加冕，追梦不休 | 我的大学时光</title>
      <link href="/blog/2021/03/07/my-college-days.html"/>
      <url>/blog/2021/03/07/my-college-days.html</url>
      
        <content type="html"><![CDATA[<p>掘金阅读<a href="https://juejin.cn/post/6936888905086009352">原文</a>,体验更好。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>“有些诗写给昨日和明日，有些诗写给爱恋，有些诗写给从来未曾谋面，但是在日落之前也从未放弃过的理想”，而我，则想写给我如诗的青春——我的大学。</p></blockquote><p>我是<a href="https://github.com/gongsir0630">程序员Kyle✨</a>，2020年9月秋招上岸KS，原计划秋招结束写一篇文章来总结自己的校招历程，无奈后面一直忙于个人项目和毕设，就把这茬给忘了。最近看了很多大佬（<a href="https://juejin.cn/post/6903518662620086285">粥里有勺糖</a>）这方面相关的文章，觉得还是必须要写一下，索性就把自己这四年的大学生活好好回忆一下。</p><p>时间总是转瞬即逝，不知不觉，我们即将告别这单纯、美好的校园生活，大学生活对每个人来说都是最宝贵的经历，每个人的经历也都各不相同，回顾一下，记录下来，也可以留作纪念，等到以后可以回味。或许这段经历对学弟学妹们有所帮助，其中的一些事情，能够使你们少走些弯路。</p><h2 id="荣耀加冕"><a href="#荣耀加冕" class="headerlink" title="荣耀加冕"></a>荣耀加冕</h2><p>回顾自己的大学生活，虽并无传奇色彩，普普通通，但也别有一番滋味。刚步入大学总归是满脸的好奇，想去尝试各种新鲜事物（事情），如今回忆起来，大大小小也基本上都完成了，也算是<code>荣耀加冕</code>了。</p><ul><li>竞选班委</li><li>奖学金</li><li>比赛</li><li>社团</li><li>恋爱</li><li>勤工助学</li><li>…<h3 id="起航-梦想开始的地方"><a href="#起航-梦想开始的地方" class="headerlink" title="起航 | 梦想开始的地方"></a>起航 | 梦想开始的地方</h3><h4 id="志愿"><a href="#志愿" class="headerlink" title="志愿"></a>志愿</h4><img src= "/blog/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/573547b95bfa4b6b8a517aed14e273e0~tplv-k3u1fbpfcp-zoom-1.image" alt="my school"><br>自己从初中开始就对计算机领域充满好奇，那时自己在玩电脑（不带打游戏的）方面也算是班上数一数二的，那时心里就想：大学一定要学计算机，毫无意外我高考志愿选择了<code>计算机科学与技术</code>专业，开始了我的Coding之路。<blockquote><p>用我的指尖实现我的技术梦</p></blockquote><h4 id="开学-amp-军训"><a href="#开学-amp-军训" class="headerlink" title="开学&amp;军训"></a>开学&amp;军训</h4>2017年9月，开学第一天要去认识下那五个可（han）爱（han）<code>室友</code>，毕竟要一起走完四年大学生活，以后还得靠他们跑跑腿、带带饭什么的，必须得先搞好关系。</li></ul><p><strong>报道这天还认识一个<code>学姐</code>，她是<code>计算机协会</code>的会长，带我们转了一下校园，最后去她们的社团摊位看了一下。（特意提及，社团故事线的开始）</strong></p><p>后面的日子就是一些什么开学典礼、<code>英语分级考试</code>（居然还有这玩意儿）、选课之类的…</p><p>印象深刻的是体检，因为自身身体原因，和校园签了个什么协议，医生告诉我交给辅导员，然后不用参加军训。（现在想想可惜了那端军训时光，我应该去参加的）</p><h4 id="竞选班委-amp-学生会"><a href="#竞选班委-amp-学生会" class="headerlink" title="竞选班委&amp;学生会"></a>竞选班委&amp;学生会</h4><p>“为什么说这一段呢？”</p><p>“因为我感觉我的荣耀之路就是从这一段故事开始的”</p><p>10月国庆收假，竞选班委，我想去竞选班长，不过我没有参加军训，和班级同学接触不多，估计支持者不多，好在我在前期也帮助了许多班级同学，感觉人员还不错（ps：协助班导<code>小姐姐</code>组织同学们填信息之类的，开学各种信息、材料要填）。</p><p>当时竞选班长就我跟另一个代号为<code>H</code>的同学，紧张刺激的竞选致辞结束后，最终结果我俩平票（其实结果这样我已经很满意了），索性就让他当了班长。</p><p>就这样，我大学的第一次failure。竞选结束后，我跟<code>H</code>一起去吃了饭，不打不相识，后来我们成为了最好的朋友。<br><img src= "/blog/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b770035a9ab451ebc7ea9af206fdeb5~tplv-k3u1fbpfcp-zoom-1.image" alt="H&#39;s Photo"></p><hr><p>班委竞选失利，学生会招新又开始了，去尝试了几个，一面都都过了，不知道为啥二面只能去一个（还好找工作面试不是这样的），结果二面挂了，哎，当时真的有点难受。</p><p>刚入学，接连受挫，心有不甘，发了个动态，接受事实，好好学习：</p><ul><li>二-三周时间看了考研高数视频，学校的题做起来就那样</li><li>剩下时间都去学C语言、刷题，了解下数据结构</li></ul><h4 id="网信招新，机会来了"><a href="#网信招新，机会来了" class="headerlink" title="网信招新，机会来了"></a>网信招新，机会来了</h4><p>11月的某一天，班级信息通知群来了一则网信团队招新海报，团队主要做学校网络维护工作，应该很适合我，去试试吧。拿起手机发了报名短信。</p><p>通过了一面，开启了一个月的团队实习（团队需要一定的技术适应以及成员磨合），一个月之后，我从12名实习选手中脱颖而出，成功加入了这个团队。</p><p>大三的时候，成为了<code>团队队长</code>，我在这个团队从大一一直肝到了大三结束，可以说，大学生活大部时间我都和这里的小伙伴待在一起，这里有很多的有趣的故事，我也收获了很多：</p><ul><li>朋友：我们一起值班、学习、玩游戏、团建</li><li>团队：不忘初心，砥砺前行 | 我愿称之为 <strong><code>“最好的我们”</code></strong></li><li>项目：为了简化团队办公，我们自研了办公系统</li><li>资源：和领导老师一起交流学习、参与科研项目</li><li>工资：团队属于勤工助学，每月可以拿酬金<br><img src= "/blog/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ae908754fb04cf1ae28d79292080283~tplv-k3u1fbpfcp-zoom-1.image" alt="最好的我们"></li></ul><h4 id="计协我来了"><a href="#计协我来了" class="headerlink" title="计协我来了"></a>计协我来了</h4><p><strong>还记得报道注册那天的计协学姐吗？</strong> 没错我和计协的故事大概是2018年3月的时候开始的。我进去了明理楼C1001房间面试<code>社团理事</code>，或许因为我的颜值（学姐说计协靠颜值招人）够高，一切都是那么顺利，我成功加入了计协这个大家庭。<br><img src= "/blog/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c2053754f88485e80deaa37f8b47d7c~tplv-k3u1fbpfcp-zoom-1.image" alt="计协十四届团队成员"><br>在这里，我们一起举办<code>电脑义诊</code>活动为全校师生解决电脑问题，得到了很多师生的支持与鼓励。2018年6月，我荣幸的通过学院社团联面试，成为了<code>第十四届计算机协会会长</code>，那一刻，荣耀加冕的同时，更重大的是肩上的责任。<br><img src= "/blog/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e73a1cc9b2af43bb9499cf9cabd0a939~tplv-k3u1fbpfcp-zoom-1.image" alt="优秀会长"><br>在计协前前后后呆了一年多时间，见证了计协几次大的变动，从学姐把社团交到我们手中那一刻起，做好社团日常管理工作的同时，带领理事举办更多有意义的活动，打造星级品牌社团是我们的目标。此时再看计协，今非昔比（<code>校园五星级社团</code>）。</p><h4 id="小结-amp-寄语"><a href="#小结-amp-寄语" class="headerlink" title="小结&amp;寄语"></a>小结&amp;寄语</h4><p>在大学一定要给自己找点事干（天天泡图书馆的学神请无视），不要让自己闲下来。班委、学生会、社团、勤工助学等等，都可以试着去参与，培养自己的兴趣爱好，结交一些良师益友（找到你的那个他/她也说不定啊）。</p><h3 id="我也曾努力学习"><a href="#我也曾努力学习" class="headerlink" title="我也曾努力学习"></a>我也曾努力学习</h3><h4 id="课程学习"><a href="#课程学习" class="headerlink" title="课程学习"></a>课程学习</h4><p>加入了网信团队之后，每周值大概4-5节班（值班期间有工作忙工作，没工作就学技术），我很少把时间花在课程学习上面，除了专业课之外，其他都是考前预习（其实还是要看个人学习能力来决定，学弟学妹不太建议模仿）。</p><p>专业课学习我还是很认真的，例如C语言、数据结构、C++等核心课程，看看语法，刷题，因为这些课程不止应付学校的考核，以后要靠这吃饭（不过我不是走的C/C++）。</p><h4 id="技术提升"><a href="#技术提升" class="headerlink" title="技术提升"></a>技术提升</h4><p>大一结束后，手上只会C和DS，什么项目也写不出来，一想，这不行啊，看了看本专业的培养方案：</p><ul><li>C++必修</li><li>计网、OS必修</li><li>前端选修</li><li>C#选修</li><li>剩下全是嵌入式<br>个人对嵌入式开发不感兴趣，but专业培养方向就是嵌入式开发，转专业已经晚了也没必要。索性我就根据培养方案修了<code>C++</code>、<code>C#</code>、前端，并且自学了当时很火的<code>Java</code>，当我在<code>Vscode</code>写下以下代码的时候，我就决定了我的技术方向-&gt;<strong><code>Java</code></strong>-&lt;:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello Java!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>紧接着学习了：</li><li>JavaSe</li><li>JavaEe</li><li>jsp/servlet</li><li>MySQL</li><li>Linux</li><li>spring</li><li>工具：GitHub、Git、IDEA、Navicat、Maven等</li></ul><p>大三的时候因为要参加一些课设和比赛，又学习了：</p><ul><li>Java框架：ssm/ssh、spring-boot</li><li>小程序开发</li><li>redis、mq等中间件</li><li>dubbo、Zookeeper</li><li>hadoop、mp、hive等大数据基础</li><li>CI/CD/DevOps等</li></ul><h4 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h4><p>一边学习，一边实践，尝试参加各类比赛：</p><ul><li>2018Linux红帽挑战赛</li><li>全国大学生计算机技能应用大赛C设计</li><li>校级开放实验</li><li>盛特杯、挑战杯</li><li>微信小程序开发大赛</li><li>服务外包创新创业大赛</li><li>华云软创</li></ul><h4 id="拿过奖学金"><a href="#拿过奖学金" class="headerlink" title="拿过奖学金"></a>拿过奖学金</h4><p>学分绩点年级前20%，综合成绩年级第三。</p><ul><li>国家励志、晶奇网络奖学金</li><li>校级一、二、三等奖学金都水过</li><li>优秀团员、三好、优秀勤工助学</li><li>年度优秀会长等等</li></ul><h4 id="小结-amp-寄语-1"><a href="#小结-amp-寄语-1" class="headerlink" title="小结&amp;寄语"></a>小结&amp;寄语</h4><ul><li>找准自己的技术方向，不断学习提升，多看相关文章，尝试自己写博客</li><li>有一定技术之后，和同学组队参加一些学科竞赛，从零开始写一些项目</li><li>学习课程也得抓紧，绩点能搞就高一点，拿点奖学金也可以续费服务器</li></ul><h3 id="我的第一份实习"><a href="#我的第一份实习" class="headerlink" title="我的第一份实习"></a>我的第一份实习</h3><p>2019年5月，大二即将结束，想找一份实习，借着学长学姐的模板，书写了人生中的第一份简历，机缘巧合之下，接到了小米Hr的电话，约电话面试时间。</p><p>第一次面试，虽然不是面对面，但还是很紧张的，表述不是很清晰，好在结果是好的，一周之后，成功拿到人生中第一个<code>offer</code>。<br><img src= "/blog/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff8497184bb342fc9a8326062335ecc2~tplv-k3u1fbpfcp-zoom-1.image" alt="小米offer"><br>7月正式实习入职，小米同学很nice，解锁新成就：</p><ul><li>人生第一张工卡</li><li>双显+高配主机</li><li>第一次参与到一个有多职能人员(PM，UI，FE，RD)的项目中，以前都是单干或者和同学一起，拍脑门子开发</li><li>第一次玩德州还交了学费<br>入职刚好赶上了部门团建，去了北京静西谷，和大佬们一起喝茶、拍照。<br><img src= "/blog/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9894d29aca53467f9521a130f2fc3ce6~tplv-k3u1fbpfcp-zoom-1.image" alt="小米同事"></li></ul><h3 id="我成为了快手人"><a href="#我成为了快手人" class="headerlink" title="我成为了快手人"></a>我成为了快手人</h3><p>20年8月，参加秋招，最终选择则签约快手，帮助大家<code>拥抱每一种生活</code>。<br><img src= "/blog/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/61c4662be9eb4ca5a387e16aab4889c1~tplv-k3u1fbpfcp-zoom-1.image" alt="ks"></p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><ul><li>20年11月正式加入中国共产党</li><li>谈过两次不长不短的恋爱</li><li><code>王者荣耀</code>传说级别打野选手</li><li>大巴山出来的孩子，读书在成都，工作去北京</li></ul><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><h4 id="一群很nice的朋友"><a href="#一群很nice的朋友" class="headerlink" title="一群很nice的朋友"></a>一群很nice的朋友</h4><p>致文中的<code>室友</code>、<code>学姐</code>、<code>小姐姐</code>、<code>H</code>、<code>最好的我们</code>、<code>计协</code>，还有一些未提及的朋友：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">聚是一团🔥</span><br><span class="line">散是满天🌟</span><br><span class="line">愿你们前路平安</span><br><span class="line">桥都坚固 隧道光明</span><br><span class="line">愿你们此去行止由❤️</span><br><span class="line">得偿所愿</span><br></pre></td></tr></table></figure><h4 id="满意的offer"><a href="#满意的offer" class="headerlink" title="满意的offer"></a>满意的offer</h4><p>秋招的结果，自己还是很满意的，感谢各位面试官的赐教</p><h4 id="还算不错的学业"><a href="#还算不错的学业" class="headerlink" title="还算不错的学业"></a>还算不错的学业</h4><ul><li>校级优秀毕业生</li><li>省级优秀毕业生</li></ul><h4 id="爱情"><a href="#爱情" class="headerlink" title="爱情"></a><del>爱情</del></h4><p><img src= "/blog/img/loading.gif" data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e565d754f63640e8a41d0f1841ce963a~tplv-k3u1fbpfcp-watermark.image" alt="爱情"></p><h3 id="感恩"><a href="#感恩" class="headerlink" title="感恩"></a>感恩</h3><p>四年中遇到了很多人和事物，感谢你们在学习、生活、工作上对我极大的帮助。</p><p>愿我爱的人和爱我的人珍惜！感恩！幸福！</p><h2 id="追梦不休"><a href="#追梦不休" class="headerlink" title="追梦不休"></a>追梦不休</h2><h3 id="当下TODO"><a href="#当下TODO" class="headerlink" title="当下TODO"></a>当下TODO</h3><ul><li>和周围同学基于<code>【知识星球】</code>组织了一个校内校招指导服务平台</li><li>基于微信小程序，自研实现这个平台<br><img src= "/blog/img/loading.gif" data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90b2bbe50dee49dc8c2466d579ee7fc6~tplv-k3u1fbpfcp-watermark.image" alt="yzb"></li></ul><h3 id="2021-Flag"><a href="#2021-Flag" class="headerlink" title="2021 Flag"></a>2021 Flag</h3><ul><li>多读书。之前趁着京东双十一，囤了一箱子各种各样的书籍，今年一定多看几本</li><li>每月学习一门有深度/干货的技术课程</li><li>每周1-2道力扣</li><li>完善个人公众号和<a href="https://gongsir.club/">个人博客</a></li><li>拒绝拖延，努力提升工作效率</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>星光不负赶路人，终有奔走红尘时，莫忘曾经是书生，共勉！</p><h2 id="掘进处女作"><a href="#掘进处女作" class="headerlink" title="掘进处女作"></a>掘进处女作</h2><p>第一次在掘金发文,希望能和各位大佬一起学习、进步！</p><h3 id="个人相关链接"><a href="#个人相关链接" class="headerlink" title="个人相关链接"></a>个人相关链接</h3><ul><li><a href="https://github.com/gongsir0630">GitHub</a></li><li><a href="https://gongsir.club/">个人主页</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 原创 </category>
          
          <category> 程序员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql配置远程连接和修改密码</title>
      <link href="/blog/2021/02/01/mysql001.html"/>
      <url>/blog/2021/02/01/mysql001.html</url>
      
        <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ol><li>基于阿里云轻量应用服务器,系统为CentOS 7;</li><li>使用宝塔服务管理服务器;</li><li>在服务器安装mysql 5.7, 本地使用dg工具连接管理.</li></ol><h3 id="安装mysql及配置"><a href="#安装mysql及配置" class="headerlink" title="安装mysql及配置"></a>安装mysql及配置</h3><ul><li>使用宝塔安装mysql服务,在宝塔商店直接安装即可,可选择主流版本:<br><img src= "/blog/img/loading.gif" data-src="https://cdn.gongsir.club/blog/image/2021/02/01f4tUcw.png" alt="宝塔安装mysql"></li><li>在宝塔面板 -&gt; 安全中放行3306端口;</li><li>云服务器供应商处放行3306端口;</li><li>在宝塔面板 -&gt; 数据库页面修改root初始密码.</li></ul><h3 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h3><ol><li>经过以上配置,可使用ssh远程login到服务器,使用命令连接mysql: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></li><li>创建新用户: <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure> <strong>说明:</strong><ul><li>username: 用户名</li><li>host: 指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符<code>%</code></li><li>passwd: 该用户的登录密码</li></ul></li><li>删除用户: <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>对新创建的用户进行授权,授权可以访问、操作的库,表等.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> privileges <span class="keyword">ON</span> db.tab <span class="keyword">TO</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>privileges: 用户的操作权限，如<code>SELECT</code>，<code>INSERT</code>，<code>UPDATE</code>等，如果要授予所的权限则使用<code>ALL</code>;</li><li>db: 数据库名称;</li><li>tab: db下的表名,全库全表可用<code>*.*</code>表示;</li></ul><p>刷新权限:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="设置与修改用户密码"><a href="#设置与修改用户密码" class="headerlink" title="设置与修改用户密码"></a>设置与修改用户密码</h3><ol><li>root用户可修改所有用户的密码,命令: <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> <span class="operator">=</span> PASSWORD(<span class="string">&#x27;newpassword&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>当前用户语法糖: <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(&quot;newpassword&quot;);</span><br></pre></td></tr></table></figure></li><li>修改简单密码会报错,此时可以修改密码策略:<ul><li>查看密码策略:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%validate%&#x27;</span>;</span><br></pre></td></tr></table></figure><img src= "/blog/img/loading.gif" data-src="https://cdn.gongsir.club/blog/image/2021/02/01AWXivL.png" alt="密码策略"></li><li>修改策略:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length<span class="operator">=</span><span class="number">6</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy<span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li>修改访问主机: <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host<span class="operator">=</span><span class="string">&#x27;host&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;username&#x27;</span>;</span><br></pre></td></tr></table></figure> <strong>说明:</strong><ul><li>host: 允许的主机ip,修改为<code>%</code>可允许所有主机访问.</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 原创 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3️⃣MyBlog-Hexo项目持续集成发布</title>
      <link href="/blog/2021/01/22/myblog-deploy.html"/>
      <url>/blog/2021/01/22/myblog-deploy.html</url>
      
        <content type="html"><![CDATA[<p>很久没更了,这段时间开始做毕设了,所以更新慢了,见谅! 这是 <strong>MyBlog</strong> 系列文章第三篇，上文讲了如何将hexo项目进行远程托管.本文说一下怎么使用Coding平台的持续集成对我们的Hexo项目进行自动部署.</p><a id="more"></a><h2 id="系列-📒"><a href="#系列-📒" class="headerlink" title="系列 📒"></a>系列 📒</h2><p>我的博客(<a href="https://blog.gongsir.club/">程序员Kyle✨|技术博客</a>)是基于Hexo搭建的, 代码托管在GitHub和Coding, 部署在阿里云服务器, 其中部署是基于Coding提供的持续集成.</p><h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p>在本地编写 Markdown 文件, 然后将代码push到托管平台, 即可自动触发持续集成, 将网页部署到云服务器, 全自动~</p><h3 id="系列文章目录"><a href="#系列文章目录" class="headerlink" title="系列文章目录"></a>系列文章目录</h3><ol><li><a href="/2020/12/14/MyBlog-Hexo/">MyBlog-Hexo搭建自己的博客</a></li><li><a href="/2020/12/20/myblog-code.html">MyBlog-多平台代码托管</a></li><li><a href="/2021/01/22/myblog-deploy.html">MyBlog-Hexo项目持续集成发布</a><hr></li></ol><h2 id="It’s-Show-Time-🌟"><a href="#It’s-Show-Time-🌟" class="headerlink" title="It’s Show~Time 🌟"></a>It’s Show~Time 🌟</h2><ol><li><p>注册Coding团队,进入工作台,创建项目:<br><img src= "/blog/img/loading.gif" data-src="https://cdn.gongsir.club/blog/image/2021/01/22UIPJbh.png" alt="22UIPJbh"></p></li><li><p>创建DevOps模板项目,填写自定义信息:<br><img src= "/blog/img/loading.gif" data-src="https://cdn.gongsir.club/blog/image/2021/01/22XkYjq6.png" alt="22XkYjq6"></p></li><li><p>进入项目后,界面如下:<br><img src= "/blog/img/loading.gif" data-src="https://cdn.gongsir.club/blog/image/2021/01/22Av92HB.png" alt="22Av92HB"></p></li><li><p>代码仓库可以托管我们的Hexo项目,可以直接从GitHub克隆过来,并且提供了定时更新;也可以在本地开发环境直接提交到这里:<br><img src= "/blog/img/loading.gif" data-src="https://cdn.gongsir.club/blog/image/2021/01/22EcRyhE.png" alt="22EcRyhE"></p></li><li><p>选择<code>持续集成</code>,新建构建计划,配置仓库信息,选择hexo项目的托管平台,我的是Coding,选择静态配置Jenkinsfile:<br><img src= "/blog/img/loading.gif" data-src="https://cdn.gongsir.club/blog/image/2021/01/22RpeXuR.png" alt="22RpeXuR"></p></li><li><p>编写Jenkinsfile:</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">agent any</span><br><span class="line">stages &#123;</span><br><span class="line">    stage(<span class="string">&#x27;检出&#x27;</span>) &#123;</span><br><span class="line">    steps &#123;</span><br><span class="line">        checkout([</span><br><span class="line">        <span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, branches: [[name: env.GIT_BUILD_REF]],</span><br><span class="line">        userRemoteConfigs: [[</span><br><span class="line">            url: env.GIT_REPO_URL,</span><br><span class="line">            credentialsId: env.CREDENTIALS_ID</span><br><span class="line">        ]]</span><br><span class="line">        ])</span><br><span class="line">        sh <span class="string">&#x27;ls -la&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;git submodule init&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;git submodule update&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&#x27;构建&#x27;</span>) &#123;</span><br><span class="line">    steps &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&#x27;构建中...&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;&#x27;</span><span class="string">&#x27;pwd</span></span><br><span class="line"><span class="string">            node -v</span></span><br><span class="line"><span class="string">            npm install -g hexo-cli</span></span><br><span class="line"><span class="string">            npm install&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">                    npmAuditInDir(directory: <span class="string">&#x27;/&#x27;</span>, collectResult: <span class="literal">true</span>)</span><br><span class="line">                    sh <span class="string">&#x27;&#x27;</span><span class="string">&#x27;pwd</span></span><br><span class="line"><span class="string">            hexo clean</span></span><br><span class="line"><span class="string">            hexo generate&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;tar -zcf /tmp/tmp.tar.gz public/&#x27;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&#x27;构建完成.&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&#x27;测试&#x27;</span>) &#123;</span><br><span class="line">    steps &#123;</span><br><span class="line">        sh <span class="string">&#x27;&#x27;</span><span class="string">&#x27;ls -lh public/</span></span><br><span class="line"><span class="string">                if [ ! -s public/index.html ]</span></span><br><span class="line"><span class="string">                then</span></span><br><span class="line"><span class="string">                exit 1</span></span><br><span class="line"><span class="string">                fi&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&#x27;部署&#x27;</span>) &#123;</span><br><span class="line">    steps &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&#x27;部署中...&#x27;</span></span><br><span class="line">        script &#123;</span><br><span class="line">        def remote = [:]</span><br><span class="line">        remote.name = <span class="string">&#x27;aliyun-server&#x27;</span></span><br><span class="line">        remote.allowAnyHosts = <span class="literal">true</span></span><br><span class="line">        remote.host = <span class="string">&#x27;gongsir.club&#x27;</span></span><br><span class="line">        remote.port = 22</span><br><span class="line">        remote.user = <span class="string">&#x27;root&#x27;</span></span><br><span class="line"></span><br><span class="line">        // 把「CODING 凭据管理」中的「凭据 ID」填入 credentialsId，而 username 和 password 无需修改</span><br><span class="line">        withCredentials([usernamePassword(credentialsId: <span class="string">&quot;1f981c07-2c51-4a64-a93b-be09ba76a406&quot;</span>, usernameVariable: <span class="string">&#x27;username&#x27;</span>, passwordVariable: <span class="string">&#x27;password&#x27;</span>)]) &#123;</span><br><span class="line">            remote.user = username</span><br><span class="line">            remote.password = password</span><br><span class="line"></span><br><span class="line">            // SSH 上传文件到远端服务器</span><br><span class="line">            sshPut remote: remote, from: <span class="string">&#x27;/tmp/tmp.tar.gz&#x27;</span>, into: <span class="string">&#x27;/tmp/&#x27;</span></span><br><span class="line">            // 解压缩</span><br><span class="line">            sshCommand remote: remote, <span class="built_in">command</span>: <span class="string">&quot;tar -zxf /tmp/tmp.tar.gz -C /tmp/&quot;</span></span><br><span class="line">            sshCommand remote: remote, sudo: <span class="literal">true</span>, <span class="built_in">command</span>: <span class="string">&quot;mkdir -p /www/wwwroot/blog.gongsir.club&quot;</span></span><br><span class="line">            sshCommand remote: remote, sudo: <span class="literal">true</span>, <span class="built_in">command</span>: <span class="string">&quot;cp -R /tmp/public/* /www/wwwroot/blog.gongsir.club/&quot;</span></span><br><span class="line">            // 重启 nginx</span><br><span class="line">            sshCommand remote: remote, sudo: <span class="literal">true</span>, <span class="built_in">command</span>: <span class="string">&quot;nginx -s reload&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&#x27;部署完成&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 「CODING 凭据管理」中的「凭据 ID」:<br> <img src= "/blog/img/loading.gif" data-src="https://cdn.gongsir.club/blog/image/2021/03/19fDIDPk.png" alt="凭据ID设置"></p></li><li><p>设置触发规则,设置代码更新到制定分支时自动触发:<br><img src= "/blog/img/loading.gif" data-src="https://cdn.gongsir.club/blog/image/2021/01/22TkLg3F.png" alt="22TkLg3F"></p></li><li><p>服务器使用<code>NGINX</code>部署静态文件夹即可:<br><img src= "/blog/img/loading.gif" data-src="https://cdn.gongsir.club/blog/image/2021/01/22fpDGmY.png" alt="22fpDGmY"></p></li><li><p>看成果:<br><img src= "/blog/img/loading.gif" data-src="https://cdn.gongsir.club/blog/gif/myblog-deploy-show.gif" alt="自动部署展示"></p></li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://help.coding.net/docs/ci/start.html">快速开始持续集成</a></li><li><a href="https://help.coding.net/docs/ci/deploy/ssh.html">自动部署到Linux服务器</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 原创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> MyBlog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2️⃣MyBlog-多平台代码托管</title>
      <link href="/blog/2020/12/20/myblog-code.html"/>
      <url>/blog/2020/12/20/myblog-code.html</url>
      
        <content type="html"><![CDATA[<p><strong>MyBlog</strong> 系列文章第二篇，上篇文章说了如何使用<a href="https://hexo.io/zh-cn/">Hexo</a>搭建自己的专属博客，但自己有两台Mac，想在不同设备都可以发布博客，为了方便进行博客迁移，所以采用代码托管平台来存储我的hexo项目文件，这里采用国外的<a href="https://github.com/">GitHub</a>和国内的<a href="https://e.coding.net/">Coding</a>.</p><a id="more"></a><h2 id="系列-📒"><a href="#系列-📒" class="headerlink" title="系列 📒"></a>系列 📒</h2><p>我的博客(<a href="https://blog.gongsir.club/">程序员Kyle✨|技术博客</a>)是基于Hexo搭建的, 代码托管在GitHub和Coding, 部署在阿里云服务器, 其中部署是基于Coding提供的持续集成.</p><h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p>在本地编写 Markdown 文件, 然后将代码push到托管平台, 即可自动触发持续集成, 将网页部署到云服务器, 全自动~</p><h3 id="系列文章目录"><a href="#系列文章目录" class="headerlink" title="系列文章目录"></a>系列文章目录</h3><ol><li><a href="/2020/12/14/MyBlog-Hexo/">MyBlog-Hexo搭建自己的博客</a></li><li><a href="/2020/12/20/myblog-code.html">MyBlog-多平台代码托管</a></li><li><a href="/2021/01/22/myblog-deploy.html">MyBlog-Hexo项目持续集成发布</a><hr></li></ol><h2 id="项目托管"><a href="#项目托管" class="headerlink" title="项目托管"></a>项目托管</h2><p>博客迁移时，我们需要保留以下文件：</p><ul><li>scaffolds/    –&gt; 模板</li><li>source/   –&gt; 资源文件和md</li><li>themes/   –&gt; 主题文件</li><li>_config.yml   –&gt; 配置文件</li><li>package.json  –&gt; 依赖文件</li><li>package-lock.json –&gt; 插件版本</li><li><strong>🌟注意：<code>public/</code>目录内容可以通过hexo生成，所以不需要backup</strong></li></ul><p>所以我们只需要将上述文件托管在GitHub、Coding等平台就可以，以后使用的时候，只需要本地安装node环境，然后拉取分支，执行：</p><ol><li>安装hexo-cli： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li>安装npm依赖： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li>解析生成静态文件： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li></ol><h3 id="Github托管"><a href="#Github托管" class="headerlink" title="Github托管"></a>Github托管</h3><ol><li>登录GitHub，新建repository，复制仓库地址<code>@your_url</code>；</li><li>本地代码文件夹<code>(blog.gongsir.club)</code>初始化，设置远程仓库地址：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin @your_url</span><br></pre></td></tr></table></figure>🌟注意：这里需要将<code>themes/blank</code>加为子模块（第一篇文章中提过，方便主题升级），此时项目根目录会自动生成一个<code>.gitmodules</code>文件，也需要上传到远程仓库：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https://github.com/a2396837/hexo-theme-blank.git themes/blank</span><br></pre></td></tr></table></figure></li><li>将本地代码push上去，文件结构如下：<br><img src= "/blog/img/loading.gif" data-src="https://cdn.gongsir.club/blog/img/20201221224358.png" alt="GitHub代码托管"></li></ol><h3 id="Coding托管"><a href="#Coding托管" class="headerlink" title="Coding托管"></a>Coding托管</h3><p>一开始我代码直接托管在GitHub上的，博客部署是基于<code>Git Actions</code>生成<code>public/</code>内容，将<code>public/</code>上传到另一个分支<code>page</code>，然后在自己的服务器拉取<code>page</code>分支以部署网站.</p><p>这种方式有一些小问题：</p><ul><li>GitHub国内访问速度感人</li><li><code>.config.yml</code>需要配置<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deploy</a></li><li>每次博客更新都需要手动部署</li><li>综上，个人觉得还是比较麻烦</li></ul><p>所以后来采用了国内Coding进行托管，并基于Coding的持续集成对博客进行自动化部署.</p><ol><li>之前已经将代码托管在GitHub的，可以直接在Coding上克隆GitHub的仓库：<br><img src= "/blog/img/loading.gif" data-src="https://cdn.gongsir.club/blog/img/20201222120853.png" alt="Coding"></li><li>修改本地git的config，将coding的url加入git配置：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url -add origin https://e.coding.net/xxx.git</span><br></pre></td></tr></table></figure>查看remote信息，此时应该包含两个push仓库，以后oush代码的时候，会同时push到github和coding：<br><img src= "/blog/img/loading.gif" data-src="https://cdn.gongsir.club/blog/img/20201222121345.png" alt="remote"></li></ol><h2 id="ssh-key管理"><a href="#ssh-key管理" class="headerlink" title="ssh-key管理"></a>ssh-key管理</h2><ol><li><p>为了方便每次push代码时避免输入密码，需要在自己本地配置ssh-key，github和coding官方都有教程：</p><ul><li><a href="https://docs.github.com/articles/generating-an-ssh-key/">generating SSH keys</a></li><li><a href="https://help.coding.net/docs/project-settings/features/ssh.html">配置SSH公钥</a></li></ul></li><li><p>本地多平台公钥管理，当本地存在多个平台的public-key时，需要添加config配置文件，否则某些平台公钥不会生效：</p></li></ol><ul><li>在<code>.ssh/</code>目录下新建config文件，配置不同平台的ssh公钥：<br><img src= "/blog/img/loading.gif" data-src="https://cdn.gongsir.club/blog/img/20201222122841.png" alt=".ssh目录"><br>config文件内容如下：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># github</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line"><span class="comment"># 这里设置github的公钥文件路径</span></span><br><span class="line">IdentityFile C:\Users\gongsir\.ssh\id_ed25519</span><br><span class="line"></span><br><span class="line"><span class="comment"># coding</span></span><br><span class="line">Host e.coding.net</span><br><span class="line">HostName e.coding.net</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line"><span class="comment"># 这里设置coding的公钥文件路径</span></span><br><span class="line">IdentityFile C:\Users\gongsir\.ssh\id_rsa</span><br></pre></td></tr></table></figure></li><li>使用<code>ssh -T git@github.com</code>、<code>ssh -T git@e.coding.net</code>验证：<br><img src= "/blog/img/loading.gif" data-src="https://cdn.gongsir.club/blog/img/20201222123241.png" alt="ssh验证"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 原创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> MyBlog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1️⃣MyBlog-Hexo搭建自己的博客</title>
      <link href="/blog/2020/12/14/MyBlog-Hexo.html"/>
      <url>/blog/2020/12/14/MyBlog-Hexo.html</url>
      
        <content type="html"><![CDATA[<p><strong>MyBlog</strong> 系列文章之一, 这篇文章, 介绍如何使用<a href="https://hexo.io/zh-cn/">Hexo</a>搭建博客环境, 以及Hexo的基本用法.</p><a id="more"></a><h2 id="系列-📒"><a href="#系列-📒" class="headerlink" title="系列 📒"></a>系列 📒</h2><p>我的博客(<a href="https://blog.gongsir.club/">程序员Kyle✨|技术博客</a>)是基于Hexo搭建的, 代码托管在GitHub和Coding, 部署在阿里云服务器, 其中部署是基于Coding提供的持续集成.</p><h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p>在本地编写 Markdown 文件, 然后将代码push到托管平台, 即可自动触发持续集成, 将网页部署到云服务器, 全自动~</p><h3 id="系列文章目录"><a href="#系列文章目录" class="headerlink" title="系列文章目录"></a>系列文章目录</h3><ol><li><a href="/2020/12/14/MyBlog-Hexo/">MyBlog-Hexo搭建自己的博客</a></li><li><a href="/2020/12/20/myblog-code.html">MyBlog-多平台代码托管</a></li><li><a href="/2021/01/22/myblog-deploy.html">MyBlog-Hexo项目持续集成发布</a><hr></li></ol><h2 id="关于Hexo"><a href="#关于Hexo" class="headerlink" title="关于Hexo"></a>关于Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="https://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>Hexo官网: <a href="https://hexo.io/zh-cn/">Hexo</a><br></p><h2 id="安装Git-Node"><a href="#安装Git-Node" class="headerlink" title="安装Git | Node"></a>安装Git | Node</h2><ol><li>本地环境: 我用的是Mac, 以下所有操作都是基于 MacOS 系统, 关于其他平台软件安装, 大同小异.<br></li><li>安装 Hexo 相当简单，只需要先安装下列应用程序即可:<ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul></li><li>MacOS使用 brew|brewcask 安装非常简单, 这里不做赘述, 其他系统也可去某度搜索, 安装很easy的~<br></li></ol><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ol><li>打开终端, 创建个人博客存放目录(eg: blog.gongsir.club):  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> blog.gongsir.club</span><br></pre></td></tr></table></figure> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog.gongsir.club</span><br></pre></td></tr></table></figure></li><li>终端执行 Hexo 安装命令: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li>终端输入以下命令查看hexo信息，成功即可： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure></li></ol><h2 id="开始-✨"><a href="#开始-✨" class="headerlink" title="开始 ✨"></a>开始 ✨</h2><h3 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h3><p>接下来就可以开始使用hexo搭建一个 “Hello World” 页面了。</p><ol><li>使用hexo的hello-world初始化你的博客（此时会自动使用Git克隆项目）： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li><li>安装hexo所需依赖： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li>启动，预览：<a href="http://localhost:4000/">http://localhost:4000</a> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li></ol><p>成功看到Hexo的Hello——World页面即表示Hexo建站成功，但是似乎UI不太喜欢，想改下主题，所以后续来了！！！</p><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><ol><li><p>我尝试过很多主题，在hexo的主题官网有很多themes，但是感觉都不是我想要的，最后在github上发现了一款不错的主题——<a href="https://github.com/a2396837/hexo-theme-blank">hexo-theme-blank</a></p><ul><li>GitHub: <a href="https://github.com/a2396837/hexo-theme-blank">https://github.com/a2396837/hexo-theme-blank</a></li><li>Theme配置文档（很详细）： <a href="https://dmx.pub/">https://dmx.pub/</a></li></ul></li><li><p>主题安装这里需要注意一下，假设我们希望将整个博客文件放在Github进行托管，而我们安装主题时通常是直接在themes文件夹下克隆主题仓库：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/a2396837/hexo-theme-blank.git blank</span><br></pre></td></tr></table></figure><p> 当我们修改了我们的博客内容，向github提交代码的时候，就会出现冲突，因为我们的themes/blank包含在博客目录下（即git工程包含了git工程），解决这个问题最简单的方法就是将themes/blank下的<code>.git</code>文件夹删除，此时themes/blank就是一个普通文件夹，博客项目就可以直接push到github。</p><p> 但是我们考虑到主题在今后可能会有升级的情况，主题目录使用<code>git pull</code>即可完成升级，因此就不能删除主题目录的<code>.git</code>，建议使用<strong>Git子模块</strong>对整个项目进行代码托管：<br> 在博客根目录执行：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 下载主题</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/a2396837/hexo-theme-blank.git themes/blank</span><br><span class="line"><span class="comment">## 将主题文件夹添加为git子模块</span></span><br><span class="line">git submodule add https://github.com/a2396837/hexo-theme-blank.git themes/blank</span><br></pre></td></tr></table></figure><p> 之后我们的博客根目录就会自动生成一个<code>.gitmodules</code>的文件，记录了子模块的信息，接下来我们正常操作父项目就可以了，想学习更多关于<code>git子模块</code>的知识，可以去官网学学~</p></li><li><p>为了主题在今后能够进行平滑升级，我们不要在主题文件夹直接修改配置，解决方法是将主题中的<code>._config.yml</code>拷贝到博客根目录的<code>source/_data</code>（需要自己新建<code>_data</code>）目录下，并重命名为<code>blank.yml</code>，然后在<code>blank.yml</code>进行主题配置:</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="built_in">source</span>/_data</span><br><span class="line"><span class="built_in">cp</span> -p themes/blank/_config.yml <span class="built_in">source</span>/_data/blank.yml</span><br></pre></td></tr></table></figure><h3 id="开始创作"><a href="#开始创作" class="headerlink" title="开始创作"></a>开始创作</h3></li><li><p>hexo可以直接解析md文档，我们只需新建一个md，然后编辑md即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;blog-title&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>以上会在<code>source/_post</code>目录下生成一个名叫“blog-title”的md文件，使用<code>vscode</code>编辑：<br><img src= "/blog/img/loading.gif" data-src="https://cdn.gongsir.club/blog/img/2020-12-17-1.png" alt="vscode编写md"></p></li><li><p>生成静态网页文件：使用hexo的命令将md和主题样式解析成html文件，并保存在<code>public/</code>下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li><li><p>运行方式：</p><ol><li>因为生成的是静态html，因此可以直接打开<code>public/</code>，双击<code>index.html</code>运行；</li><li>使用<code>hexo s | hexo s --debug (debug模式)</code>.</li></ol></li></ol><h3 id="博客部署"><a href="#博客部署" class="headerlink" title="博客部署"></a>博客部署</h3><p>将生成的<code>public/</code>目录下的静态文件（html、csss、js等）直接部署到你的服务器（可以使用scp、ftp等服务），再配置nginx即可访问.<br><br>但是这样很麻烦，每次写一篇，都需要以下步骤：</p><ol><li><code>hexo clean</code>: 清除<code>public/</code>缓存;</li><li><code>hexo g</code>: 重新生成静态文件；</li><li>手动部署到你的服务器.</li></ol><p>其实我们不用这么麻烦，当我们写完一篇博客之后，直接将代码push到托管平台，之后就可以自动解析、自动部署.如何实现? 看后续… …</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li>Hexo官方文档：<a href="https://hexo.io/zh-cn/docs/">这里可以从零开始学习hexo</a></li><li>hexo-theme-blank：<a href="https://dmx.pub/">这里可以学习hexo-theme-blank的详细配置</a></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 原创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> hexo-theme-blank </tag>
            
            <tag> MyBlog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
